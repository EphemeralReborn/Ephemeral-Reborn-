{"version":"1.0","source":"dHJ5X3JlcXVpcmUgPSBmdW5jdGlvbihtb2R1bGUsIG1lc3NhZ2UpDQoNCiAgICBsb2NhbCBzdWNjZXNzLCByZXN1bHQgPSBwY2FsbChyZXF1aXJlLCBtb2R1bGUpDQoNCiAgICBpZiBzdWNjZXNzIHRoZW4gDQogICAgICAgIHJldHVybiByZXN1bHQgDQogICAgZWxzZSANCiAgICAgICAgcmV0dXJuIGVycm9yKG1lc3NhZ2UpIA0KICAgIGVuZA0KZW5kDQoNCmxvY2FsIGZmaSA9IHRyeV9yZXF1aXJlKCJmZmkiLCAiRkZJIGluaXRpYWxpemF0aW9uIGZhaWxlZCwgZW5zdXJlICdBbGxvdyB1bnNhZmUgc2NyaXB0cycgaXMgdGlja2VkIikNCmxvY2FsIGJpdCA9IHRyeV9yZXF1aXJlKCJiaXQiKQ0KbG9jYWwgdmVjdG9yID0gdHJ5X3JlcXVpcmUoInZlY3RvciIpDQpsb2NhbCBiYXNlNjQgPSB0cnlfcmVxdWlyZSgiZ2FtZXNlbnNlL2Jhc2U2NCIsICJEb3dubG9hZCBiYXNlNjQgbGliOiBodHRwczovL2dhbWVzZW5zZS5wdWIvZm9ydW1zL3ZpZXd0b3BpYy5waHA\"}
